package Schedule;

import User.JobFunction;
import User.User;
import jxl.write.Label;
import jxl.write.WritableCell;
import jxl.write.WritableSheet;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;

/**
 * Created by GameMonkey on 14-08-2015.
 */


// @ToDo Check whether or not this class is deprecated when Sheet Worker is done
public class ScheduleWorker {

    private HashMap<String, Integer> columnsByName;
    private HashMap<JobFunction, PhoneList> phoneListsByJobFunction;
    private WritableSheet sheet;
    
    public ScheduleWorker(WritableSheet sheet){
        this.sheet = sheet;

        findColumns();
        mapJobs();
        generatePhoneLists();
    }

    public PhoneList getPhoneListByJobFunction(JobFunction jobFunction){
        return phoneListsByJobFunction.get(jobFunction);
    }

    // Creates a HashMap of the columns by name and give their position.
    // Uses the sheet given to the constructor.
    private void findColumns(){
        columnsByName = new HashMap<String, Integer>();
        int columnSize = sheet.getColumns();

        for(int i = 0; i < columnSize; ++i){
            columnsByName.put(sheet.getCell(i, 0).getContents(), i);
        }

    }

    // Maps the functions from the original sheet to the groups Bartender, Music and Light.
    // Uses regex to match.
    // @ToDo Find out if afryder/Busboy is bar or music.
    private void mapJobs(){
        String bar = ".*(B|b)ar.*";
        String light = ".*(L|l)ight.*";
        int column = columnsByName.get("Jobfunktion");
        int rows = sheet.getRows();

        for(int i = 1; i < rows; ++i){
            WritableCell job = sheet.getWritableCell(column, i);
            Label label = (Label) job;

            if(!job.getContents().isEmpty()){
                if(job.getContents().matches(bar)){
                    label.setString("Bartender");
                }
                else if(job.getContents().matches(light)){
                    label.setString("Light");
                }
                else{
                    label.setString("Music");
                }
            }

        }

    }

    // Generate PhoneLists
    // This method is hard coded to match the construct of the xls generated by planday!
    private void generatePhoneLists(){
        phoneListsByJobFunction = new HashMap<JobFunction, PhoneList>();

        for(JobFunction job : JobFunction.values()){
            phoneListsByJobFunction.put(job, new PhoneList());
        }

        int dateColumn = columnsByName.get("Dato");
        int jobColumn = columnsByName.get("Jobfunktion");
        int idColumn = columnsByName.get("LÃ¸n nr.");
        int nameColumn = columnsByName.get("Medarbejder");

        int rows = sheet.getRows();
        DateFormat df = new SimpleDateFormat("dd-MM-yyyy");

        for(int i = 1; i < rows; ++i){
            String date = sheet.getCell(dateColumn, i).getContents();
            String name = sheet.getCell(nameColumn, i).getContents();
            String id = sheet.getCell(idColumn, i).getContents();
            String job = sheet.getCell(jobColumn, i).getContents();

            try {
                User user = new User(
                        df.parse(date),
                        name,
                        Integer.parseInt(id),
                        JobFunction.valueOf(job));

                getPhoneListByJobFunction(user.getJobFunction()).addUser(user);
            }
            catch (ParseException e){
                System.out.print(e.getMessage());
            }
            catch (IllegalArgumentException e){
                //Happens if the job is an empty string.
                //And that entry is ignored for the moment. 
            }
        }

        for(PhoneList list : phoneListsByJobFunction.values()){
            list.createLists();
        }
    }
}
